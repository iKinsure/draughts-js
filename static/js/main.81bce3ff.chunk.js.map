{"version":3,"sources":["config/enum.js","components/Piece/Piece.js","components/Board/Board.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["DATA","Object","freeze","VIEW","INIT_DATA","Piece","className","keys","this","props","figure","toLowerCase","React","Component","Board","item","EMPTY","i","j","classes","view","onClick","renderFigure","row","map","renderItem","data","renderRow","isEnemy","elem","isWhiteTurn","BLACK","BLACK_KING","WHITE","WHITE_KING","isAlly","isMinion","validate","createEmptyView","Array","fill","createView","ACTUAL","forEach","dir","di","dj","x","y","KILLABLE","NECESSARY","AVAILABLE","some","includes","App","state","rotated","turn","move","previous","setState","dead","slice","BOARD_SIZE","undefined","handleClick","rotate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81bce3ff.chunk.js","sourcesContent":["/* constants */\r\n\r\nexport const DATA = Object.freeze({\r\n    'EMPTY': 0,\r\n    'BLACK': 1,\r\n    'WHITE': 2,\r\n    'BLACK_KING': 3,\r\n    'WHITE_KING': 4,\r\n});\r\n\r\nexport const VIEW = Object.freeze({\r\n    'EMPTY': 0,\r\n    'ACTUAL': 1,\r\n    'AVAILABLE': 2,\r\n    'NECESSARY': 3,\r\n    'KILLABLE': 4,\r\n});\r\n\r\nexport const INIT_DATA = [\r\n    [0, 1, 0, 1, 0, 1, 0, 1],\r\n    [1, 0, 1, 0, 1, 0, 1, 0],\r\n    [0, 1, 0, 1, 0, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [2, 0, 2, 0, 2, 0, 2, 0],\r\n    [0, 2, 0, 2, 0, 2, 0, 2],\r\n    [2, 0, 2, 0, 2, 0, 2, 0],\r\n];\r\n\r\nexport const BOARD_SIZE = 8;","import React from 'react';\r\nimport './Piece.css';\r\nimport {DATA} from '../../config/enum';\r\n\r\n/**\r\n * Represents game piece\r\n */\r\nclass Piece extends React.Component {\r\n    render() {\r\n        return (\r\n            <span\r\n                className={'figure figure-' + Object.keys(DATA)[this.props.figure].toLowerCase()}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Piece;","import React from 'react';\r\nimport './Board.css';\r\nimport Piece from '../Piece/Piece';\r\nimport {DATA, VIEW} from \"../../config/enum\";\r\n\r\n/**\r\n * Defines Board rendering\r\n */\r\nclass Board extends React.Component {\r\n\r\n    renderFigure(item) {\r\n        if (item !== DATA.EMPTY) {\r\n            return <Piece figure={item} />\r\n        }\r\n    }\r\n\r\n    renderItem(item, i, j) {\r\n        const classes = 'board-item' +\r\n            ((j + i) % 2 === 0 ? ' board-item-white' : ' board-item-black') +\r\n            ' board-' + Object.keys(VIEW)[this.props.view[i][j]].toLowerCase();\r\n        return (\r\n            <div\r\n                className={classes}\r\n                key={j}\r\n                onClick={() => this.props.onClick(i, j)}\r\n            >\r\n                {this.renderFigure(item)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderRow(row, i) {\r\n        return (\r\n            <div className=\"board-row\" key={i}>\r\n                {row.map((item, j) => this.renderItem(item, i, j))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'board ' + this.props.classes}>\r\n                {this.props.data.map((row, i) => this.renderRow(row, i))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import './App.css';\nimport Board from '../Board/Board';\nimport React from 'react';\nimport {DATA, VIEW, INIT_DATA, BOARD_SIZE} from '../../config/enum';\n\nconst isEnemy = (elem, isWhiteTurn) => {\n    return isWhiteTurn\n        ? elem === DATA.BLACK || elem === DATA.BLACK_KING\n        : elem === DATA.WHITE || elem === DATA.WHITE_KING;\n}\n\nconst isAlly = (elem, isWhiteTurn) => {\n    return isWhiteTurn\n        ? elem === DATA.WHITE || elem === DATA.WHITE_KING\n        : elem === DATA.BLACK || elem === DATA.BLACK_KING;\n}\n\nconst isKing = elem => elem === DATA.WHITE_KING || elem === DATA.BLACK_KING;\n\nconst isMinion = elem => (elem === DATA.WHITE || elem === DATA.BLACK);\n\nconst validate = (i, j) => i >= 0 && j >= 0 && i < BOARD_SIZE && j < BOARD_SIZE;\n\nconst createEmptyView = () => Array(BOARD_SIZE).fill(null).map(() => Array(BOARD_SIZE).fill(VIEW.EMPTY));\n\nconst createView = (i, j, data, isWhiteTurn) => {\n\n    const view = createEmptyView();\n    view[i][j] = VIEW.ACTUAL;\n\n    const directions = [\n        (i, j) => [--i, --j],\n        (i, j) => [--i, ++j],\n        (i, j) => [++i, --j],\n        (i, j) => [++i, ++j],\n    ];\n\n    // iterate and set view fields\n    directions.forEach(dir => {\n        let [di, dj] = dir(i, j);\n        while (validate(di, dj)) {\n            if (isAlly(data[di][dj], isWhiteTurn)) {\n                break;\n            } else if (isEnemy(data[di][dj], isWhiteTurn)) {\n\n                let [x, y] = dir(di, dj);\n                if (validate(x, y) && data[x][y] === DATA.EMPTY) {\n                    view[di][dj] = VIEW.KILLABLE;\n                    view[x][y] = VIEW.NECESSARY;\n                }\n                break;\n\n            } else {\n                view[di][dj] = VIEW.AVAILABLE;\n            }\n            [di, dj] = dir(di, dj);\n        }\n    });\n\n    // clean view\n    if (view.some(row => row.includes(VIEW.NECESSARY))) {\n        return view.map(row => row.map(elem => {\n            if (elem === VIEW.AVAILABLE) {\n                elem = VIEW.EMPTY;\n            }\n            return elem;\n        }));\n    } else if (isWhiteTurn && isMinion(data[i][j])) {\n        return view.map((row, di) => row.map((elem, dj) => {\n            if (i < di) {\n                elem = VIEW.EMPTY;\n            }\n            return elem;\n        }));\n    } else if (!isWhiteTurn && isMinion(data[i][j])) {\n        return view.map((row, di) => row.map((elem, dj) => {\n            if (i > di) {\n                elem = VIEW.EMPTY;\n            }\n            return elem;\n        }));\n    }\n\n    return view;\n}\n\n/**\n * Main component with game logic\n */\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: INIT_DATA,\n            view: createEmptyView(),\n            isWhiteTurn: true,\n            rotated: false,\n        };\n    }\n\n    handleClick(i, j) {\n\n        const data = this.state.data;\n        const view = this.state.view;\n        const turn = this.state.isWhiteTurn;\n\n        if (view[i][j] === VIEW.AVAILABLE) {\n\n            // TODO: check if there is necessary move available\n\n            this.move(i, j, this.previous.i, this.previous.j);\n            this.setState({view: createEmptyView()});\n\n        } else if (view[i][j] === VIEW.NECESSARY) {\n\n            this.move(i, j, this.previous.i, this.previous.j, {\n                i: i - (i >= this.previous.i ? 1 : -1),\n                j: j - (j >= this.previous.j ? 1 : -1),\n            });\n            this.setState({view: createEmptyView()});\n\n        } else if (isAlly(data[i][j], turn)) {\n\n            this.previous = {\n                i: i,\n                j: j,\n            };\n            this.setState({\n                view: createView(i, j, data, turn),\n            });\n\n        }\n    }\n\n    move(i, j, di, dj, dead) {\n\n        // copy\n        const data = this.state.data.slice();\n\n        // check if piece becomes king\n        if (this.state.isWhiteTurn && i === 0) {\n            data[i][j] = DATA.WHITE_KING;\n        } else if (!this.state.isWhiteTurn && i === (BOARD_SIZE - 1)) {\n            data[i][j] = DATA.BLACK_KING;\n        } else {\n            data[i][j] = data[di][dj];\n        }\n\n        // kill\n        if (dead !== undefined) {\n            data[dead.i][dead.j] = DATA.EMPTY;\n            // TODO: check if can kill again\n        }\n\n        // clear old field after\n        data[di][dj] = DATA.EMPTY;\n\n        this.setState({\n            data: data,\n            isWhiteTurn: !this.state.isWhiteTurn,\n        });\n    }\n\n    rotate() {\n        this.setState({rotated: !this.state.rotated});\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <header className=\"app-header\">\n                    <h1>Draughts game!</h1>\n                </header>\n                <main>\n                    <Board\n                        onClick={(i, j) => this.handleClick(i, j)}\n                        data={this.state.data}\n                        view={this.state.view}\n                        classes={this.state.rotated ? 'board rotated' : ''}\n                    />\n                    <p>{this.state.isWhiteTurn ? 'White round' : 'Black round'}</p>\n                    <button onClick={() => this.rotate()} >\n                        Rotate board\n                    </button>\n                </main>\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}