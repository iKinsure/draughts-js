{"version":3,"sources":["config/enum.js","components/Piece/Piece.js","components/Board/Board.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["DATA","Object","freeze","VIEW","INIT_DATA","Piece","className","keys","this","props","figure","toLowerCase","React","Component","Board","item","EMPTY","i","j","classes","view","onClick","renderFigure","row","map","renderItem","data","renderRow","App","state","resetView","whiteNext","rotated","di","dj","Array","fill","fun","checkToBlock","checkAfter","checkSize","AVAILABLE","prevI","prevJ","elem","BLACK","BLACK_KING","NECESSARY","KILLABLE","WHITE","WHITE_KING","functions","ACTUAL","forEach","f","check","setState","upperLeft","upperRight","bottomLeft","bottomRight","checker","move","obj","console","log","dead","slice","BOARD_SIZE","undefined","handleClick","rotate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.696295de.chunk.js","sourcesContent":["/* constants */\r\n\r\nexport const DATA = Object.freeze({\r\n    'EMPTY': 0,\r\n    'BLACK': 1,\r\n    'WHITE': 2,\r\n    'BLACK_KING': 3,\r\n    'WHITE_KING': 4,\r\n});\r\n\r\nexport const VIEW = Object.freeze({\r\n    'EMPTY': 0,\r\n    'ACTUAL': 1,\r\n    'AVAILABLE': 2,\r\n    'NECESSARY': 3,\r\n    'KILLABLE': 4,\r\n});\r\n\r\nexport const INIT_DATA = [\r\n    [0, 1, 0, 1, 0, 1, 0, 1],\r\n    [1, 0, 1, 0, 1, 0, 1, 0],\r\n    [0, 1, 0, 1, 0, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [2, 0, 2, 0, 2, 0, 2, 0],\r\n    [0, 2, 0, 2, 0, 2, 0, 2],\r\n    [2, 0, 2, 0, 2, 0, 2, 0],\r\n];\r\n\r\nexport const BOARD_SIZE = 8;","import React from 'react';\r\nimport './Piece.css';\r\nimport {DATA} from '../../config/enum';\r\n\r\n/**\r\n * Represents game piece\r\n */\r\nclass Piece extends React.Component {\r\n    render() {\r\n        return (\r\n            <span\r\n                className={'figure figure-' + Object.keys(DATA)[this.props.figure].toLowerCase()}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Piece;","import React from 'react';\r\nimport './Board.css';\r\nimport Piece from '../Piece/Piece';\r\nimport {DATA, VIEW} from \"../../config/enum\";\r\n\r\n/**\r\n * Defines Board rendering\r\n */\r\nclass Board extends React.Component {\r\n\r\n    renderFigure(item) {\r\n        if (item !== DATA.EMPTY) {\r\n            return <Piece figure={item} />\r\n        }\r\n    }\r\n\r\n    renderItem(item, i, j) {\r\n        const classes = 'board-item' +\r\n            ((j + i) % 2 === 0 ? ' board-item-white' : ' board-item-black') +\r\n            ' board-' + Object.keys(VIEW)[this.props.view[i][j]].toLowerCase();\r\n        return (\r\n            <div\r\n                className={classes}\r\n                key={j}\r\n                onClick={() => this.props.onClick(i, j)}\r\n            >\r\n                {this.renderFigure(item)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderRow(row, i) {\r\n        return (\r\n            <div className=\"board-row\" key={i}>\r\n                {row.map((item, j) => this.renderItem(item, i, j))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'board ' + this.props.classes}>\r\n                {this.props.data.map((row, i) => this.renderRow(row, i))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import './App.css';\nimport Board from '../Board/Board';\nimport React from 'react';\nimport {DATA, VIEW, INIT_DATA, BOARD_SIZE} from '../../config/enum';\n\n/**\n * Main component with game logic\n */\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: INIT_DATA,\n            view: this.resetView(),\n            whiteNext: true,\n            rotated: false,\n        };\n    }\n\n    isMoveDiagonal(i, j, di, dj) {\n        return (j + di === dj + i) || (j + i === dj + di);\n    }\n\n    resetView() {\n        return Array(BOARD_SIZE)\n            .fill(null)\n            .map(() => Array(BOARD_SIZE).fill(VIEW.EMPTY));\n    }\n\n    checkSize(i, j) {\n        return i >= 0 && j >= 0 && i < BOARD_SIZE && j < BOARD_SIZE;\n    }\n\n    check(i, j, view, fun) {\n        [i, j] = this.checkToBlock(i, j, view, fun);\n        this.checkAfter(i, j, view, fun);\n    }\n\n    checkToBlock(i, j, view, fun) {\n        [i, j] = fun(i, j);\n        while (this.checkSize(i, j) && this.state.data[i][j] === DATA.EMPTY) {\n            view[i][j] = VIEW.AVAILABLE;\n            [i, j] = fun(i, j);\n        }\n        return [i, j];\n    }\n\n    checkAfter(i, j, view, fun) {\n        if (this.checkSize(i, j)) {\n            let prevI = i;\n            let prevJ = j;\n            let elem = this.state.data[i][j];\n            if (this.state.whiteNext) {\n                if (elem === DATA.BLACK || elem === DATA.BLACK_KING) {\n                    [i, j] = fun(i, j);\n                    if (this.checkSize(i, j)) {\n                        elem = this.state.data[i][j];\n                        if (elem === DATA.EMPTY) {\n                            view[i][j] = VIEW.NECESSARY;\n                            view[prevI][prevJ] = VIEW.KILLABLE;\n                        }\n                    }\n                }\n            } else {\n                if (elem === DATA.WHITE || elem === DATA.WHITE_KING) {\n                    [i, j] = fun(i, j);\n                    if (this.checkSize(i, j)) {\n                        elem = this.state.data[i][j];\n                        if (elem === DATA.EMPTY) {\n                            view[i][j] = VIEW.NECESSARY;\n                            view[prevI][prevJ] = VIEW.KILLABLE;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    checker(i, j, functions) {\n        // calculate view\n        const view = this.resetView();\n        view[i][j] = VIEW.ACTUAL;\n        // check all directions\n        functions.forEach(f => this.check(i, j, view, f));\n        // saving as previous\n        this.prevI = i;\n        this.prevJ = j;\n        // update view\n        this.setState({\n            view: view,\n        });\n    }\n\n    handleClick(i, j) {\n        const elem = this.state.data[i][j];\n\n        const upperLeft = (i, j) => [--i, --j];\n        const upperRight = (i, j) => [--i, ++j];\n        const bottomLeft = (i, j) => [++i, --j];\n        const bottomRight = (i, j) => [++i, ++j];\n\n        switch (elem) {\n            case DATA.WHITE:\n                if (this.state.whiteNext) {\n                    this.checker(i, j, [upperRight, upperLeft]);\n                }\n                break;\n            case DATA.WHITE_KING:\n                if (this.state.whiteNext) {\n                    this.checker(i, j, [upperRight, upperLeft, bottomRight, bottomLeft]);\n                }\n                break;\n            case DATA.BLACK:\n                if (!this.state.whiteNext) {\n                    this.checker(i, j, [bottomRight, bottomLeft]);\n                }\n                break;\n            case DATA.BLACK_KING:\n                if (!this.state.whiteNext) {\n                    this.checker(i, j, [upperRight, upperLeft, bottomRight, bottomLeft]);\n                }\n                break;\n            default:\n                if (this.state.view[i][j] === VIEW.AVAILABLE) {\n                    this.move(i, j, this.prevI, this.prevJ);\n                    this.setState({view: this.resetView()});\n                } else if (this.state.view[i][j] === VIEW.NECESSARY) {\n                    const obj= {\n                        i: i - (i >= this.prevI ? 1 : -1),\n                        j: j - (j >= this.prevJ ? 1 : -1),\n                    };\n                    console.log(obj);\n                    this.move(i, j, this.prevI, this.prevJ, obj);\n                    this.setState({view: this.resetView()});\n                }\n                break;\n        }\n    }\n\n    move(i, j, di, dj, dead) {\n\n        // copy\n        const data = this.state.data.slice();\n\n        // check if piece becomes king\n        if (this.state.whiteNext && i === 0) {\n            data[i][j] = DATA.WHITE_KING;\n        } else if (!this.state.whiteNext && i === (BOARD_SIZE - 1)) {\n            data[i][j] = DATA.BLACK_KING;\n        } else {\n            data[i][j] = data[di][dj];\n        }\n\n        // kill\n        if (dead !== undefined) {\n            data[dead.i][dead.j] = DATA.EMPTY;\n        }\n\n        // clear old field after\n        data[di][dj] = DATA.EMPTY;\n\n        this.setState({\n            data: data,\n            whiteNext: !this.state.whiteNext,\n        });\n    }\n\n    rotate() {\n        this.setState({rotated: !this.state.rotated});\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <header className=\"app-header\">\n                    <h1>Draughts game!</h1>\n                </header>\n                <main>\n                    <Board\n                        onClick={(i, j) => this.handleClick(i, j)}\n                        data={this.state.data}\n                        view={this.state.view}\n                        classes={this.state.rotated ? 'board rotated' : ''}\n                    />\n                    <p>{this.state.whiteNext ? 'White round' : 'Black round'}</p>\n                    <button onClick={() => this.rotate()} >\n                        Rotate board\n                    </button>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}