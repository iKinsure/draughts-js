{"version":3,"sources":["config/enum.js","components/Piece/Piece.js","components/Board/Board.js","logic/View.js","components/Menu/Menu.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["DATA","Object","freeze","VIEW","INIT_DATA","Piece","className","keys","this","props","figure","toLowerCase","React","Component","Board","item","EMPTY","i","j","classes","view","onClick","renderFigure","row","map","renderItem","data","renderRow","directions","validate","isEnemy","elem","isWhiteTurn","BLACK","BLACK_KING","WHITE","WHITE_KING","isAlly","isMinion","createEmptyMatrix","Array","fill","View","requireKill","matrix","createMatrix","ACTUAL","forEach","dir","di","dj","x","y","KILLABLE","NECESSARY","AVAILABLE","some","includes","Menu","style","display","isWinner","msg","App","JSON","parse","stringify","views","createViews","state","rotated","counter","winner","BOARD_SIZE","iIterator","jIterator","setState","temp","entries","v","result","move","changePlayer","kill","handleClick","menuHandleClick","rotate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a66e31d.chunk.js","sourcesContent":["/* constants */\r\n\r\nexport const DATA = Object.freeze({\r\n    'EMPTY': 0,\r\n    'BLACK': 1,\r\n    'WHITE': 2,\r\n    'BLACK_KING': 3,\r\n    'WHITE_KING': 4,\r\n});\r\n\r\nexport const VIEW = Object.freeze({\r\n    'EMPTY': 0,\r\n    'ACTUAL': 1,\r\n    'AVAILABLE': 2,\r\n    'NECESSARY': 3,\r\n    'KILLABLE': 4,\r\n});\r\n\r\nexport const INIT_DATA = [\r\n    [0, 1, 0, 1, 0, 1, 0, 1],\r\n    [1, 0, 1, 0, 1, 0, 1, 0],\r\n    [0, 1, 0, 1, 0, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [2, 0, 2, 0, 2, 0, 2, 0],\r\n    [0, 2, 0, 2, 0, 2, 0, 2],\r\n    [2, 0, 2, 0, 2, 0, 2, 0],\r\n];\r\n\r\nexport const BOARD_SIZE = 8;","import React from 'react';\r\nimport './Piece.css';\r\nimport {DATA} from '../../config/enum';\r\n\r\n/**\r\n * Represents game piece\r\n */\r\nclass Piece extends React.Component {\r\n    render() {\r\n        return (\r\n            <span\r\n                className={'figure figure-' + Object.keys(DATA)[this.props.figure].toLowerCase()}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Piece;","import React from 'react';\r\nimport './Board.css';\r\nimport Piece from '../Piece/Piece';\r\nimport {DATA, VIEW} from \"../../config/enum\";\r\n\r\n/**\r\n * Defines Board rendering\r\n */\r\nclass Board extends React.Component {\r\n\r\n    renderFigure(item) {\r\n        if (item !== DATA.EMPTY) {\r\n            return <Piece figure={item} />\r\n        }\r\n    }\r\n\r\n    renderItem(item, i, j) {\r\n        const classes = 'board-item' +\r\n            ((j + i) % 2 === 0 ? ' board-item-white' : ' board-item-black') +\r\n            ' board-' + Object.keys(VIEW)[this.props.view[i][j]].toLowerCase();\r\n        return (\r\n            <div\r\n                className={classes}\r\n                key={j}\r\n                onClick={() => this.props.onClick(i, j)}\r\n            >\r\n                {this.renderFigure(item)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderRow(row, i) {\r\n        return (\r\n            <div className=\"board-row\" key={i}>\r\n                {row.map((item, j) => this.renderItem(item, i, j))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'board ' + this.props.classes}>\r\n                {this.props.data.map((row, i) => this.renderRow(row, i))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import {BOARD_SIZE, DATA, VIEW} from \"../config/enum\";\r\n\r\nconst directions = [\r\n    (i, j) => [--i, --j],\r\n    (i, j) => [--i, ++j],\r\n    (i, j) => [++i, --j],\r\n    (i, j) => [++i, ++j],\r\n];\r\n\r\nconst validate = (i, j) => i >= 0 && j >= 0 && i < BOARD_SIZE && j < BOARD_SIZE;\r\n\r\nexport const isEnemy = (elem, isWhiteTurn) => {\r\n    return isWhiteTurn\r\n        ? elem === DATA.BLACK || elem === DATA.BLACK_KING\r\n        : elem === DATA.WHITE || elem === DATA.WHITE_KING;\r\n}\r\n\r\nconst isAlly = (elem, isWhiteTurn) => {\r\n    return isWhiteTurn\r\n        ? elem === DATA.WHITE || elem === DATA.WHITE_KING\r\n        : elem === DATA.BLACK || elem === DATA.BLACK_KING;\r\n}\r\n\r\nconst isKing = elem => elem === DATA.WHITE_KING || elem === DATA.BLACK_KING;\r\n\r\nconst isMinion = elem => (elem === DATA.WHITE || elem === DATA.BLACK);\r\n\r\nexport const createEmptyMatrix = () => Array(BOARD_SIZE).fill(null).map(() => Array(BOARD_SIZE).fill(VIEW.EMPTY));\r\n\r\nclass View {\r\n\r\n    constructor(i, j, data, isWhiteTurn) {\r\n        this.i = i;\r\n        this.j = j;\r\n        this.requireKill = false;\r\n        this.matrix = this.createMatrix(i, j, data, isWhiteTurn);\r\n    }\r\n\r\n    createMatrix(i, j, data, isWhiteTurn) {\r\n\r\n        const view = createEmptyMatrix();\r\n\r\n        if (isAlly(data[i][j], isWhiteTurn)) {\r\n\r\n            view[i][j] = VIEW.ACTUAL;\r\n\r\n            if (isKing(data[i][j])) {\r\n                directions.forEach(dir => {\r\n                    let [di, dj] = dir(i, j);\r\n                    while (validate(di, dj)) {\r\n                        if (isAlly(data[di][dj], isWhiteTurn)) {\r\n                            break;\r\n                        } else if (isEnemy(data[di][dj], isWhiteTurn)) {\r\n                            let [x, y] = dir(di, dj);\r\n                            while (validate(x, y) && data[x][y] === DATA.EMPTY) {\r\n                                view[di][dj] = VIEW.KILLABLE;\r\n                                view[x][y] = VIEW.NECESSARY;\r\n                                [x, y] = dir(x, y);\r\n                            }\r\n                            break;\r\n                        } else {\r\n                            view[di][dj] = VIEW.AVAILABLE;\r\n                        }\r\n                        [di, dj] = dir(di, dj);\r\n                    }\r\n                });\r\n            } else if (isMinion(data[i][j])) {\r\n                directions.forEach(dir => {\r\n                    let [di, dj] = dir(i, j);\r\n                    if (validate(di, dj)) {\r\n                        if (isAlly(data[di][dj], isWhiteTurn)) {\r\n                            // nothing\r\n                        } else if (isEnemy(data[di][dj], isWhiteTurn)) {\r\n                            let [x, y] = dir(di, dj);\r\n                            if (validate(x, y) && data[x][y] === DATA.EMPTY) {\r\n                                view[di][dj] = VIEW.KILLABLE;\r\n                                view[x][y] = VIEW.NECESSARY;\r\n                            }\r\n                        } else {\r\n                            view[di][dj] = VIEW.AVAILABLE;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // clean view\r\n            if (view.some(row => row.includes(VIEW.NECESSARY))) {\r\n                this.requireKill = true;\r\n                return view.map(row => row.map(elem => {\r\n                    if (elem === VIEW.AVAILABLE) {\r\n                        elem = VIEW.EMPTY;\r\n                    }\r\n                    return elem;\r\n                }));\r\n            } else if (isWhiteTurn && isMinion(data[i][j])) {\r\n                return view.map((row, di) => row.map(elem => {\r\n                    if (i < di) {\r\n                        elem = VIEW.EMPTY;\r\n                    }\r\n                    return elem;\r\n                }));\r\n            } else if (!isWhiteTurn && isMinion(data[i][j])) {\r\n                return view.map((row, di) => row.map(elem => {\r\n                    if (i > di) {\r\n                        elem = VIEW.EMPTY;\r\n                    }\r\n                    return elem;\r\n                }));\r\n            }\r\n        }\r\n\r\n        return view;\r\n    }\r\n}\r\n\r\nexport default View;","import React from 'react';\r\nimport './Menu.css';\r\n\r\n/**\r\n * Floating menu\r\n */\r\nclass Menu extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"menu\" style={{ display: this.props.isWinner ? 'block' : 'none' }}>\r\n                <div className=\"menu-message\">{this.props.msg}</div>\r\n                <div className=\"menu-item\" onClick={() => this.props.onClick() }>\r\n                    Play against player\r\n                </div>\r\n                <div className=\"menu-item\">Play against AI as white</div>\r\n                <div className=\"menu-item\">Play against AI as black</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import './App.css';\nimport Board from '../Board/Board';\nimport React from 'react';\nimport {DATA, VIEW, INIT_DATA, BOARD_SIZE} from '../../config/enum';\nimport View, {isEnemy} from \"../../logic/View\";\nimport {createEmptyMatrix} from \"../../logic/View\";\nimport Menu from \"../Menu/Menu\";\n\n/**\n * Main component with game logic\n */\nclass App extends React.Component {\n\n    constructor(props) {\n        const data = JSON.parse(JSON.stringify(INIT_DATA));\n        super(props);\n        this.views = this.createViews(data, true);\n        this.state = {\n            data: data,\n            isWhiteTurn: true,\n            rotated: false,\n            view: this.views[[0, 0]],\n            isWinner: false,\n        };\n    }\n\n    isWinner(data, isWhiteTurn) {\n        let counter = 0;\n        data.forEach(row => row.forEach(elem => {\n            if (isEnemy(elem, isWhiteTurn)) {\n                counter++;\n            }\n        }));\n        if (counter === 0) {\n            this.winner = isWhiteTurn ? 'The winner is WHITE!' : 'The winner is BLACK!';\n            return true;\n        }\n        return false;\n    }\n\n    createViews(data, isWhiteTurn) {\n        const views = [];\n        data.forEach((row, i) =>\n            row.forEach((elem, j) =>\n                views[[i, j]] = new View(i, j, data, isWhiteTurn)));\n        return views;\n    }\n\n    move(i, j, data, view, isWhiteTurn) {\n        if (isWhiteTurn && i === 0) {\n            data[i][j] = DATA.WHITE_KING;\n        } else if (!isWhiteTurn && i === (BOARD_SIZE - 1)) {\n            data[i][j] = DATA.BLACK_KING;\n        } else {\n            data[i][j] = data[view.i][view.j];\n        }\n        data[view.i][view.j] = DATA.EMPTY;\n    }\n\n    kill(i, j, data, view) {\n        const iIterator = i >= view.i ? 1 : -1;\n        const jIterator = j >= view.j ? 1 : -1;\n        let [x, y] = [i, j];\n        while (x !== view.i || y !== view.j) {\n            x -= iIterator;\n            y -= jIterator\n            if (view.matrix[x][y] === VIEW.KILLABLE) {\n                data[x][y] = DATA.EMPTY;\n                break;\n            }\n        }\n    }\n\n    changePlayer(data, isWhiteTurn) {\n        this.views = this.createViews(data, !isWhiteTurn);\n        this.setState({\n            data: data,\n            isWhiteTurn: !isWhiteTurn,\n            view: this.views[[0, 0]],\n        });\n    }\n\n    handleClick(i, j) {\n\n        const view = this.state.view;\n        const data = this.state.data;\n        const isWhiteTurn = this.state.isWhiteTurn;\n\n        if (view.matrix[i][j] === VIEW.AVAILABLE) { // move ally minion\n\n            // create tip matrix with required moves\n            const temp = createEmptyMatrix();\n            let requireKill = false;\n            Object.entries(this.views).forEach(v => {\n                if (v[1].requireKill) {\n                    requireKill = true;\n                    v[1].matrix.forEach((row, di) => row.forEach((elem, dj) => {\n                        if (elem === VIEW.ACTUAL || elem === VIEW.KILLABLE) {\n                            temp[di][dj] = elem;\n                        }\n                    }));\n                }\n            });\n\n            if (requireKill) {\n                const result = view;\n                result.matrix = temp;\n                this.setState({\n                    view: result,\n                });\n                return;\n            }\n\n            this.move(i, j, data, view, isWhiteTurn);\n\n            if (this.isWinner(data, isWhiteTurn)) {\n                this.setState({isWinner: true});\n                return;\n            }\n\n            this.changePlayer(data, isWhiteTurn);\n\n        } else if (view.matrix[i][j] === VIEW.NECESSARY) { // kill enemy minion and move\n\n            this.kill(i, j, data, view);\n            this.move(i, j, data, view, isWhiteTurn);\n\n            // check if minion can kill again\n            this.views[[i, j]] = new View(i, j, data, isWhiteTurn);\n            this.views[[view.i, view.j]] = new View(view.i, view.j, data, isWhiteTurn);\n            if (this.views[[i, j]].requireKill) {\n                this.setState({\n                    data: data,\n                    view: this.views[[i, j]],\n                });\n            } else {\n\n                if (this.isWinner(data, isWhiteTurn)) {\n                    this.setState({isWinner: true});\n                    return;\n                }\n\n                this.changePlayer(data, isWhiteTurn);\n            }\n\n        } else { // change view\n            this.setState({view: this.views[[i, j]]});\n        }\n\n    }\n\n    rotate() {\n        this.setState({rotated: !this.state.rotated});\n    }\n\n    menuHandleClick() {\n        const data = JSON.parse(JSON.stringify(INIT_DATA));\n        this.views = this.createViews(data, true);\n        this.setState({\n            data: data,\n            isWhiteTurn: true,\n            rotated: false,\n            view: this.views[[0, 0]],\n            isWinner: false,\n        });\n    }\n\n    render() {\n        const isWinner = this.state.isWinner;\n        return (\n            <div className=\"app\">\n                <header className=\"app-header\">\n                    <h1>Draughts game!</h1>\n                </header>\n                <main>\n                    <Board\n                        onClick={isWinner ? () => {} : (i, j) => this.handleClick(i, j)}\n                        data={this.state.data}\n                        view={this.state.view.matrix}\n                        classes={this.state.rotated ? 'board rotated' : ''}\n                    />\n                    <p>{this.state.isWhiteTurn ? 'White round' : 'Black round'}</p>\n                    <Menu\n                        isWinner={isWinner}\n                        msg={this.winner}\n                        onClick={() => this.menuHandleClick()} />\n                    <button onClick={() => this.rotate()} >Rotate board</button>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}