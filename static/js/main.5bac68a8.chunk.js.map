{"version":3,"sources":["config/enum.js","components/Piece/Piece.js","components/Board/Board.js","logic/View.js","components/Menu/Menu.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["DATA","Object","freeze","VIEW","GAMEMODE","INIT_DATA","Piece","className","keys","this","props","figure","toLowerCase","React","Component","Board","item","EMPTY","i","j","classes","view","onClick","renderFigure","row","map","renderItem","data","renderRow","directions","validate","isEnemy","elem","isWhiteTurn","BLACK","BLACK_KING","WHITE","WHITE_KING","isAlly","isMinion","createEmptyMatrix","Array","fill","View","requireKill","isBlocked","matrix","createMatrix","counter","ACTUAL","forEach","dir","di","dj","x","y","KILLABLE","NECESSARY","AVAILABLE","some","includes","Menu","style","display","isWinner","msg","againstPlayer","againstAI","getRandomInt","min","max","Math","ceil","floor","random","App","JSON","parse","stringify","views","createViews","state","rotated","isPlayerBlocked","loop","winner","push","BOARD_SIZE","iIterator","jIterator","setState","mode","VS_PLAYER","VS_AI","killable","available","obj","length","kill","move","temp","result","changePlayer","handleClick","rotate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bac68a8.chunk.js","sourcesContent":["/* constants */\r\n\r\nexport const DATA = Object.freeze({\r\n    'EMPTY': 0,\r\n    'BLACK': 1,\r\n    'WHITE': 2,\r\n    'BLACK_KING': 3,\r\n    'WHITE_KING': 4,\r\n});\r\n\r\nexport const VIEW = Object.freeze({\r\n    'EMPTY': 0,\r\n    'ACTUAL': 1,\r\n    'AVAILABLE': 2,\r\n    'NECESSARY': 3,\r\n    'KILLABLE': 4,\r\n});\r\n\r\nexport const GAMEMODE = Object.freeze({\r\n    'VS_PLAYER': 0,\r\n    'VS_AI': 1,\r\n});\r\n\r\nexport const INIT_DATA = [\r\n    [0, 1, 0, 1, 0, 1, 0, 1],\r\n    [1, 0, 1, 0, 1, 0, 1, 0],\r\n    [0, 1, 0, 1, 0, 1, 0, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0],\r\n    [2, 0, 2, 0, 2, 0, 2, 0],\r\n    [0, 2, 0, 2, 0, 2, 0, 2],\r\n    [2, 0, 2, 0, 2, 0, 2, 0],\r\n];\r\n\r\nexport const BOARD_SIZE = 8;","import React from 'react';\r\nimport './Piece.css';\r\nimport {DATA} from '../../config/enum';\r\n\r\n/**\r\n * Represents game piece\r\n */\r\nclass Piece extends React.Component {\r\n    render() {\r\n        return (\r\n            <span\r\n                className={'figure figure-' + Object.keys(DATA)[this.props.figure].toLowerCase()}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Piece;","import React from 'react';\r\nimport './Board.css';\r\nimport Piece from '../Piece/Piece';\r\nimport {DATA, VIEW} from \"../../config/enum\";\r\n\r\n/**\r\n * Defines Board rendering\r\n */\r\nclass Board extends React.Component {\r\n\r\n    renderFigure(item) {\r\n        if (item !== DATA.EMPTY) {\r\n            return <Piece figure={item} />\r\n        }\r\n    }\r\n\r\n    renderItem(item, i, j) {\r\n        const classes = 'board-item' +\r\n            ((j + i) % 2 === 0 ? ' board-item-white' : ' board-item-black') +\r\n            ' board-' + Object.keys(VIEW)[this.props.view[i][j]].toLowerCase();\r\n        return (\r\n            <div\r\n                className={classes}\r\n                key={j}\r\n                onClick={() => this.props.onClick(i, j)}\r\n            >\r\n                {this.renderFigure(item)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderRow(row, i) {\r\n        return (\r\n            <div className=\"board-row\" key={i}>\r\n                {row.map((item, j) => this.renderItem(item, i, j))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'board ' + this.props.classes}>\r\n                {this.props.data.map((row, i) => this.renderRow(row, i))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import {BOARD_SIZE, DATA, VIEW} from \"../config/enum\";\r\n\r\nconst directions = [\r\n    (i, j) => [--i, --j],\r\n    (i, j) => [--i, ++j],\r\n    (i, j) => [++i, --j],\r\n    (i, j) => [++i, ++j],\r\n];\r\n\r\nconst validate = (i, j) => i >= 0 && j >= 0 && i < BOARD_SIZE && j < BOARD_SIZE;\r\n\r\nconst isEnemy = (elem, isWhiteTurn) => {\r\n    return isWhiteTurn\r\n        ? elem === DATA.BLACK || elem === DATA.BLACK_KING\r\n        : elem === DATA.WHITE || elem === DATA.WHITE_KING;\r\n}\r\n\r\nexport const isAlly = (elem, isWhiteTurn) => {\r\n    return isWhiteTurn\r\n        ? elem === DATA.WHITE || elem === DATA.WHITE_KING\r\n        : elem === DATA.BLACK || elem === DATA.BLACK_KING;\r\n}\r\n\r\nconst isKing = elem => elem === DATA.WHITE_KING || elem === DATA.BLACK_KING;\r\n\r\nconst isMinion = elem => (elem === DATA.WHITE || elem === DATA.BLACK);\r\n\r\nexport const createEmptyMatrix = () => Array(BOARD_SIZE).fill(null).map(() => Array(BOARD_SIZE).fill(VIEW.EMPTY));\r\n\r\nclass View {\r\n\r\n    constructor(i, j, data, isWhiteTurn) {\r\n        this.i = i;\r\n        this.j = j;\r\n        this.requireKill = false;\r\n        this.isBlocked = false;\r\n        this.matrix = this.createMatrix(i, j, data, isWhiteTurn);\r\n    }\r\n\r\n    createMatrix(i, j, data, isWhiteTurn) {\r\n\r\n        let counter = 0;\r\n        let view = createEmptyMatrix();\r\n\r\n        if (isAlly(data[i][j], isWhiteTurn)) {\r\n\r\n            view[i][j] = VIEW.ACTUAL;\r\n\r\n            if (isKing(data[i][j])) {\r\n                directions.forEach(dir => {\r\n                    let [di, dj] = dir(i, j);\r\n                    while (validate(di, dj)) {\r\n                        if (isAlly(data[di][dj], isWhiteTurn)) {\r\n                            break;\r\n                        } else if (isEnemy(data[di][dj], isWhiteTurn)) {\r\n                            let [x, y] = dir(di, dj);\r\n                            while (validate(x, y) && data[x][y] === DATA.EMPTY) {\r\n                                view[di][dj] = VIEW.KILLABLE;\r\n                                view[x][y] = VIEW.NECESSARY;\r\n                                [x, y] = dir(x, y);\r\n                                counter++;\r\n                            }\r\n                            break;\r\n                        } else {\r\n                            view[di][dj] = VIEW.AVAILABLE;\r\n                            counter++;\r\n                        }\r\n                        [di, dj] = dir(di, dj);\r\n                    }\r\n                });\r\n            } else if (isMinion(data[i][j])) {\r\n                directions.forEach(dir => {\r\n                    let [di, dj] = dir(i, j);\r\n                    if (validate(di, dj)) {\r\n                        if (isAlly(data[di][dj], isWhiteTurn)) {\r\n                            // nothing\r\n                        } else if (isEnemy(data[di][dj], isWhiteTurn)) {\r\n                            let [x, y] = dir(di, dj);\r\n                            if (validate(x, y) && data[x][y] === DATA.EMPTY) {\r\n                                view[di][dj] = VIEW.KILLABLE;\r\n                                view[x][y] = VIEW.NECESSARY;\r\n                                counter++;\r\n                            }\r\n                        } else {\r\n                            view[di][dj] = VIEW.AVAILABLE;\r\n                            counter++;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // clean view\r\n            if (view.some(row => row.includes(VIEW.NECESSARY))) {\r\n                this.requireKill = true;\r\n                view = view.map(row => row.map(elem => {\r\n                    if (elem === VIEW.AVAILABLE) {\r\n                        elem = VIEW.EMPTY;\r\n                        counter--;\r\n                    }\r\n                    return elem;\r\n                }));\r\n            } else if (isWhiteTurn && isMinion(data[i][j])) {\r\n                view = view.map((row, di) => row.map(elem => {\r\n                    if (i < di) {\r\n                        if (elem !== VIEW.EMPTY) {\r\n                            elem = VIEW.EMPTY;\r\n                            counter--;\r\n                        }\r\n                    }\r\n                    return elem;\r\n                }));\r\n            } else if (!isWhiteTurn && isMinion(data[i][j])) {\r\n                view = view.map((row, di) => row.map(elem => {\r\n                    if (i > di) {\r\n                        if (elem !== VIEW.EMPTY) {\r\n                            elem = VIEW.EMPTY;\r\n                            counter--;\r\n                        }\r\n                    }\r\n                    return elem;\r\n                }));\r\n            }\r\n        }\r\n\r\n        if (counter === 0) {\r\n            this.isBlocked = true;\r\n        }\r\n\r\n        return view;\r\n    }\r\n}\r\n\r\nexport default View;","import React from 'react';\r\nimport './Menu.css';\r\n\r\n/**\r\n * Floating menu\r\n */\r\nclass Menu extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"menu\" style={{ display: this.props.isWinner ? 'block' : 'none' }}>\r\n                <div className=\"menu-message\">{this.props.msg}</div>\r\n                <div className=\"menu-item\" onClick={() => this.props.onClick.againstPlayer() }>\r\n                    Play against player\r\n                </div>\r\n                <div className=\"menu-item\" onClick={() => this.props.onClick.againstAI()} >\r\n                    Play against AI\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu;","import './App.css';\nimport Board from '../Board/Board';\nimport React from 'react';\nimport {DATA, VIEW, INIT_DATA, BOARD_SIZE, GAMEMODE} from '../../config/enum';\nimport View, {isAlly} from \"../../logic/View\";\nimport {createEmptyMatrix} from \"../../logic/View\";\nimport Menu from \"../Menu/Menu\";\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive).\n */\nconst getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Main component with game logic\n */\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const data = JSON.parse(JSON.stringify(INIT_DATA));\n        this.views = this.createViews(data, true);\n        this.state = {\n            data: data,\n            isWhiteTurn: true,\n            rotated: false,\n            view: this.views[0][0],\n            isWinner: true,\n        };\n    }\n\n    isWinner(data, views, isWhiteTurn) {\n        let counter = 0;\n        data.forEach(row => row.forEach(elem => {\n            if (isAlly(elem, isWhiteTurn)) {\n                counter++;\n            }\n        }));\n\n        let isPlayerBlocked = true;\n        loop: for (let i = 0; i < BOARD_SIZE; i++) {\n            for (let j = 0; j < BOARD_SIZE; j++) {\n                if (!views[i][j].isBlocked) {\n                    isPlayerBlocked = false;\n                    break loop;\n                }\n            }\n        }\n\n        if (counter === 0 || isPlayerBlocked) {\n            this.winner = isWhiteTurn ? 'The winner is BLACK!' : 'The winner is WHITE!';\n            return true;\n        }\n        return false;\n    }\n\n    createViews(data, isWhiteTurn) {\n        const views = [];\n        for (let i = 0; i < BOARD_SIZE; i++) {\n            views.push([]);\n            for (let j = 0; j < BOARD_SIZE; j++) {\n                views[i][j] = new View(i, j, data, isWhiteTurn);\n            }\n        }\n        return views;\n    }\n\n    move(i, j, data, view, isWhiteTurn) {\n        if (isWhiteTurn && i === 0) {\n            data[i][j] = DATA.WHITE_KING;\n        } else if (!isWhiteTurn && i === (BOARD_SIZE - 1)) {\n            data[i][j] = DATA.BLACK_KING;\n        } else {\n            data[i][j] = data[view.i][view.j];\n        }\n        data[view.i][view.j] = DATA.EMPTY;\n    }\n\n    kill(i, j, data, view) {\n        const iIterator = i >= view.i ? 1 : -1;\n        const jIterator = j >= view.j ? 1 : -1;\n        let [x, y] = [i, j];\n        while (x !== view.i || y !== view.j) {\n            x -= iIterator;\n            y -= jIterator\n            if (view.matrix[x][y] === VIEW.KILLABLE) {\n                data[x][y] = DATA.EMPTY;\n                break;\n            }\n        }\n    }\n\n    changePlayer(data, isWhiteTurn) {\n\n        isWhiteTurn = !isWhiteTurn;\n        const views = this.createViews(data, isWhiteTurn);\n        if (this.isWinner(data, views, isWhiteTurn)) {\n            this.setState({isWinner: true});\n            return;\n        }\n\n        if (this.state.mode === GAMEMODE.VS_PLAYER) {\n\n            this.views = views;\n            this.setState({\n                data: data,\n                isWhiteTurn: isWhiteTurn,\n                view: this.views[0][0],\n            });\n\n        } else if (this.state.mode === GAMEMODE.VS_AI) {\n\n            // create tip matrix with required moves\n            const killable = [];\n            const available = [];\n\n            let requireKill = false;\n            views.forEach(row => {\n                row.forEach(view => {\n                    view.matrix.forEach((row, x) => {\n                        row.forEach((elem, y) => {\n                            if (elem === VIEW.NECESSARY) {\n                                requireKill = true;\n                                killable.push({\n                                    view: view,\n                                    i: x,\n                                    j: y,\n                                });\n                            } else if (elem === VIEW.AVAILABLE) {\n                                available.push({\n                                    view: view,\n                                    i: x,\n                                    j: y,\n                                });\n                            }\n                        });\n                    });\n                });\n            });\n\n            if (requireKill) {\n                const obj = killable[getRandomInt(0, killable.length - 1)];\n                this.kill(obj.i, obj.j, data, obj.view);\n                this.move(obj.i, obj.j, data, obj.view, isWhiteTurn);\n\n                // check if minion can kill again\n                views[obj.i][obj.j] = new View(obj.i, obj.j, data, isWhiteTurn);\n                obj.view = views[obj.i][obj.j];\n                views[obj.view.i][obj.view.j] = new View(obj.view.i, obj.view.j, data, isWhiteTurn);\n                while (views[obj.i][obj.j].requireKill) {\n                    // this.setState({\n                    //     data: data,\n                    // });\n\n                    views[obj.i][obj.j].matrix.forEach((row, x) => {\n                        row.forEach((elem, y) => {\n                            if (elem === VIEW.NECESSARY) {\n                                obj.i = x;\n                                obj.j = y;\n                            }\n                        });\n                    });\n\n                    this.kill(obj.i, obj.j, data, obj.view);\n                    this.move(obj.i, obj.j, data, obj.view, isWhiteTurn);\n\n                    views[obj.i][obj.j] = new View(obj.i, obj.j, data, isWhiteTurn);\n                    obj.view = views[obj.i][obj.j];\n                    views[obj.view.i][obj.view.j] = new View(obj.view.i, obj.view.j, data, isWhiteTurn);\n                }\n\n            } else {\n                const obj = available[getRandomInt(0, available.length - 1)];\n                this.move(obj.i, obj.j, data, obj.view, isWhiteTurn);\n            }\n\n            this.views = this.createViews(data, !isWhiteTurn);\n            this.setState({\n                data: data,\n                isWhiteTurn: !isWhiteTurn,\n                view: this.views[0][0],\n            });\n\n        }\n    }\n\n    handleClick(i, j) {\n\n        const view = this.state.view;\n        const data = this.state.data;\n        const isWhiteTurn = this.state.isWhiteTurn;\n\n        if (view.matrix[i][j] === VIEW.AVAILABLE) { // move ally minion\n\n            // create tip matrix with required moves\n            const temp = createEmptyMatrix();\n            let requireKill = false;\n\n            this.views.forEach(row => {\n               row.forEach(view => {\n                   if (view.requireKill) {\n                       requireKill = true;\n                       view.matrix.forEach((row, x) => {\n                          row.forEach((elem, y) => {\n                              if (elem === VIEW.ACTUAL || elem === VIEW.KILLABLE) {\n                                  temp[x][y] = elem;\n                              }\n                          });\n                       });\n                   }\n               });\n            });\n\n            if (requireKill) {\n                const result = view;\n                result.matrix = temp;\n                this.setState({\n                    view: result,\n                });\n                return;\n            }\n\n            this.move(i, j, data, view, isWhiteTurn);\n\n            this.changePlayer(data, isWhiteTurn);\n\n        } else if (view.matrix[i][j] === VIEW.NECESSARY) { // kill enemy minion and move\n\n            this.kill(i, j, data, view);\n            this.move(i, j, data, view, isWhiteTurn);\n\n            // check if minion can kill again\n            this.views[i][j] = new View(i, j, data, isWhiteTurn);\n            this.views[view.i][view.j] = new View(view.i, view.j, data, isWhiteTurn);\n            if (this.views[i][j].requireKill) {\n                this.setState({\n                    data: data,\n                    view: this.views[i][j],\n                });\n            } else {\n\n                this.changePlayer(data, isWhiteTurn);\n            }\n\n        } else { // change view\n            this.setState({view: this.views[i][j]});\n        }\n\n    }\n\n    rotate() {\n        this.setState({rotated: !this.state.rotated});\n    }\n\n    againstPlayer() {\n        const data = JSON.parse(JSON.stringify(INIT_DATA));\n        this.views = this.createViews(data, true);\n        this.setState({\n            data: data,\n            isWhiteTurn: true,\n            rotated: false,\n            view: this.views[0][0],\n            isWinner: false,\n            mode: GAMEMODE.VS_PLAYER,\n        });\n    }\n\n    againstAI() {\n        const data = JSON.parse(JSON.stringify(INIT_DATA));\n        this.views = this.createViews(data, true);\n        this.setState({\n            data: data,\n            isWhiteTurn: true,\n            rotated: false,\n            view: this.views[0][0],\n            isWinner: false,\n            mode: GAMEMODE.VS_AI,\n        });\n    }\n\n    render() {\n        const isWinner = this.state.isWinner;\n        return (\n            <div className=\"app\">\n                <header className=\"app-header\">\n                    <h1>Draughts game!</h1>\n                </header>\n                <main>\n                    <Board\n                        onClick={isWinner ? () => {} : (i, j) => this.handleClick(i, j)}\n                        data={this.state.data}\n                        view={this.state.view.matrix}\n                        classes={this.state.rotated ? 'board rotated' : ''}\n                    />\n                    <p>{this.state.isWhiteTurn ? 'White round' : 'Black round'}</p>\n                    <Menu\n                        isWinner={isWinner}\n                        msg={this.winner}\n                        onClick={{\n                            againstPlayer: () => this.againstPlayer(),\n                            againstAI: () => this.againstAI(),\n                        }}\n                    />\n                    <button onClick={() => this.rotate()} >Rotate board</button>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}